#!/usr/bin/env bash
# shellcheck disable=SC1090
source "$(dirname "${BASH_SOURCE[0]}")/includer.sh"

include options.sh
include bash-logger.sh

options::standard
options::description "A makeshift minimal CI system. It watches a directory for\
 changes and if found it will execute the provided command (after \"--\" ) from the\
working directory."
options::add -o W -d "directory to watch for changes" -a -m -e WatchDir
options::add -o w -d "working directory" -a -m -e WorkingDir
options::add -o t -d "interval to check for changes" -a -m -e WaitTime
options::parse "$@"
shift "$((OPTIND - 1))"

if [ -z "$WaitTime" ]; then
  WaitTime=3
fi

WorkingDir=${WorkingDir:-$WatchDir}

function wait_for_change() {
  local wait_time
  wait_time="${1:-3}"
  cd "$WatchDir" >/dev/null || error_exit "$WatchDir not found"
  local start_version
  start_version=$(find "$WatchDir" -ls 2>/dev/null | sort | cksum)
  local current_version
  current_version="$start_version"
  while [ "$start_version" = "$current_version" ]; do
    read -r -t "$wait_time" COMMAND
    if [ "$COMMAND" = "X" ]; then
      current_version="go"
    else
      current_version=$(find "$WatchDir" -ls 2>/dev/null | sort | cksum)
    fi
  done
  cd - >/dev/null || error_exit "Failed to return to original directory"
}

function run_command() {
  log::info "Working directory $WorkingDir"
  cd "$WorkingDir" >/dev/null || error_exit "$WorkingDir not found"
  log::info "Executing command: $*"
  "$@"
  log::info "EXIT: $?"
  cd - >/dev/null || error_exit "Failed to return to original directory"
}

function main() {
  log::info "Working directory $WorkingDir"
  log::info "Watching directory $WatchDir"
  log::info "Polling interval $WaitTime"
  log::info "Executing command: $*"
  while true; do
    wait_for_change "$WaitTime"
    run_command "$@"
  done
}

main "$@"
