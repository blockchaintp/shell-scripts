#!/usr/bin/env bash
# Copyright 2021 Blockchain Technology Partners
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

# shellcheck source=includer.sh
source "$(dirname "${BASH_SOURCE[0]}")/includer.sh"

@include options
@include git
@include log
@include dirs

options::standard
options::description "Add a new tag to the repository based on semver and\
 conventional commits."
options::add -o t -d "target directory to examine and update" -a -m \
  -e TARGET_DIR
options::add -o p -d "Patch tag" \
  -x PATCH_TAG
options::add -o n -d "Don't annotate tag" \
  -x DONT_ANNOTATE_TAG
options::add -o b -d "proceed to bump minor version if breaking changes are found" \
  -x ALLOW_BREAKING
options::add -o c -d "generate and commit change before tagging" \
  -x GENERATE_CHANGELOG
options::parse "$@"

pushd "$TARGET_DIR" >/dev/null || exit 1

CURRENT_REV=$(git::cmd describe --tags --match 'v*') || exit 1
LATEST_TAG=$(git::cmd describe --tags --match 'v*' --abbrev=0) || exit 1
LATEST_VERSION=$(echo "$LATEST_TAG" | cut -c2-)
BREAKING_CHANGES=$(git::cmd log "$LATEST_TAG"..HEAD | grep -c "BREAKING CHANGE")
CHANGES=$(git::cmd log "$LATEST_TAG"..HEAD | grep -c "^commit")

log::notice "$LATEST_VERSION $CHANGES changes  $BREAKING_CHANGES breaks"

skip="true"
if [ "$BREAKING_CHANGES" -gt 0 ]; then
  if [ "${ALLOW_BREAKING}" = "true" ]; then
    TAG=$("$(dirs::of)/semver" bump minor "$LATEST_VERSION")
    skip="false"
  else
    log::warn "Minor version changes due to breaking changes must be explicity allowed!"
    exit 1
  fi
elif [ "$CHANGES" -gt 0 ]; then
  TAG=$("$(dirs::of)/semver" bump patch "$LATEST_VERSION")
  skip="false"
else
  TAG="$LATEST_VERSION"
  skip="true"
fi

TAG="v${TAG}"

if [ "$skip" = "false" ]; then
  log::notice "Will tag as $TAG"
  if [ "$DONT_ANNOTATE_TAG" = "true" ]; then
    git::cmd tag "$TAG"
  else
    if [ "$GENERATE_CHANGELOG" = "true" ]; then
      "$(dirs::of)"/changelog | sed -e "s/$CURRENT_REV/$TAG/" >CHANGELOG.md
      git add CHANGELOG.md
      git commit --no-verify -m "ci: Update CHANGELOG releasing $TAG" CHANGELOG.md
    fi
    exit
    git::cmd tag -a -s "$TAG" -m "Auto Tagging $TAG"
  fi
fi
popd || exit 0
