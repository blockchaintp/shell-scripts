#!/usr/bin/env bash
# shellcheck source=includer.sh
source "$(dirname "${BASH_SOURCE[0]}")/includer.sh"

@include options
@include log
@include k8s
@include dirs

options::standard
options::description "Extract a useful collection of support information from a\
 kubernetes namespace and tar it up"
options::add -o n -d "namespace to target" -a -e NAMESPACE
options::add -o o -d "output directory" -a -m -e OUT_DIR
options::parse "$@"
shift $((OPTIND - 1))

if [ -z "${NAMESPACE}" ]; then
  ns=$(k8s::current_ns)
  if [ -z "$ns" ]; then
    NAMESPACE=default
  else
    NAMESPACE="$ns"
  fi
fi
NS_ARGS=(-n "${NAMESPACE}")
OUT_DIR_NS="${OUT_DIR}/${NAMESPACE}"
OUT_DIR_LOGS="${OUT_DIR}/logs"

dirs::replace "${OUT_DIR}"

function topology {
  log::notice "Saving topology"
  dirs::ensure "${OUT_DIR_NS}"
  k8s::get all "${NS_ARGS[@]}" -o yaml >"${OUT_DIR_NS}"/k8s-get-all.yaml
}

function configmaps {
  log::notice "Saving configmaps"
  dirs::ensure "${OUT_DIR_NS}"
  k8s::get cm "${NS_ARGS[@]}" -o yaml >"${OUT_DIR_NS}"/k8s-get-cm.yaml
}

function describe_pods {
  log::notice "Describing pods"
  dirs::ensure "${OUT_DIR_NS}"
  dirs::ensure "${OUT_DIR_NS}"/pod
  for pod in $(k8s::get_pod_names "${NS_ARGS[@]}"); do
    k8s::describe "$pod" >"${OUT_DIR_NS}/$pod.describe"
  done
}

function logs {
  log::notice "Saving logs"
  dirs::ensure "${OUT_DIR_LOGS}"
  for pod in $(k8s::get_pod_names "${NS_ARGS[@]}"); do
    for container in $(k8s::get_containers_for_pod "$pod"); do
      dirs::ensure "${OUT_DIR_LOGS}/$pod"
      k8s::log "$pod" -c "$container" --timestamps \
        >"${OUT_DIR_LOGS}/$pod/$container-current.log"
      k8s::log "$pod" -c "$container" --timestamps \
        -p >"${OUT_DIR_LOGS}/$pod/$container-previous.log" 2>/dev/null || true
    done
  done
}

function create_package {
  local now
  now=$(date '+%F-%H%M%z')
  local cluster
  cluster=$(k8s::current_cluster)
  local file="$cluster.${NAMESPACE:-CURRENT}-${now}.tar.gz"
  log::notice "Creating package $file"
  find "${OUT_DIR}" -type f -print0 | sed -e "s@$OUT_DIR/@@g" |
    xargs -0 tar cfz "$file" -C "${OUT_DIR}"
}

topology
describe_pods
configmaps
logs
create_package
