#!/usr/bin/env bash
# Copyright Â© 2023 Paravela Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

# shellcheck source=includer.sh
source "$(dirname "${BASH_SOURCE[0]}")/includer.sh"

@include dirs
@include exec
@include k8s
@include log
@include options

options::standard
options::description "Extract a useful collection of support information from a\
 kubernetes namespace and tar it up"
options::add -o n -d "namespace to target" -a -e NAMESPACE
options::add -o o -d "output directory" -a -e OUT_DIR
options::add -o c -d "exclude configmaps" -x EXCLUDE_CONFIGMAPS
options::add -o A -d "get all namespaces" -x ALL_NAMESPACES
options::parse_available "$@"
shift $((OPTIND - 1))

if [ -z "${OUT_DIR}" ]; then
  OUT_DIR=$(mktemp -d)
fi
if [ -z "${NAMESPACE}" ]; then
  ns=$(k8s::current_ns)
  if [ -z "$ns" ]; then
    NAMESPACE=default
  else
    NAMESPACE="$ns"
  fi
fi

dirs::replace "${OUT_DIR}"

function topology {
  local ns=${1:?}
  local out_dir_ns="${OUT_DIR}/$ns"
  log::notice "Saving topology for namespace $ns"
  dirs::ensure "$out_dir_ns"
  k8s::get all -n "$ns" -o yaml >"${out_dir_ns}/k8s-get-all.yaml"
}

function configmaps {
  local ns=${1:?}
  if [ "${EXCLUDE_CONFIGMAPS}" = "true" ]; then
    return
  fi
  local out_dir_ns="${OUT_DIR}/$ns"
  log::notice "Saving configmaps for namespace $ns"
  dirs::ensure "$out_dir_ns"
  k8s::get cm -n "$ns" -o yaml >"${out_dir_ns}/k8s-get-cm.yaml"
}

function describe_pods {
  local ns=${1:?}
  local out_dir_ns="${OUT_DIR}/$ns"
  log::notice "Describing pods for namespace $ns"
  dirs::ensure "$out_dir_ns"
  dirs::ensure "$out_dir_ns/pod"
  for pod in $(k8s::get_pod_names -n "$ns"); do
    k8s::describe -n "$ns" "$pod" >"${out_dir_ns}/$pod.describe"
  done
}

function logs {
  local ns=${1:?}
  local out_dir_ns="${OUT_DIR}/$ns"
  log::notice "Saving logs for namespace $ns"
  dirs::ensure "${out_dir_ns}"
  for pod in $(k8s::get_pod_names -n "$ns"); do
    for container in $(k8s::get_containers_for_pod "$pod" "$ns"); do
      dirs::ensure "${out_dir_ns}/$pod"
      k8s::log -n "$ns" "$pod" -c "$container" --timestamps \
        >"${out_dir_ns}/$pod/$container-current.log"
      k8s::log -n "$ns" "$pod" -c "$container" --timestamps \
        -p >"${out_dir_ns}/$pod/$container-previous.log" 2>/dev/null || true
      if [ "$container" = "validator" ]; then
        log::notice "$pod container \"$container\" pulling extra logs"
        pod_sname=$(echo "$pod" | awk -F/ '{print $NF}')
        exec::hide k8s::cp -n "$ns" -c "$container" \
          "$pod_sname:/var/log/sawtooth/validator-debug.log" \
          "${out_dir_ns}/$pod/validator-debug.log"
      fi
    done
  done
}

function create_package {
  local now
  now=$(date '+%F-%H%M%z')
  local cluster
  cluster=$(k8s::current_cluster)
  local file="$cluster.${NAMESPACE:-CURRENT}-${now}.tar.gz"
  if [ "${ALL_NAMESPACES}" = "true" ]; then
    file="$cluster.ALL-${now}.tar.gz"
  fi
  file=${file/\//_}
  log::notice "Creating package $file"
  find "${OUT_DIR}" -type f -print0 | sed -e "s@$OUT_DIR/@@g" |
    xargs -0 tar cfz "$file" -C "${OUT_DIR}"
  if [ -n "$(command -v shred)" ]; then
    log::notice "Shredding temporary files in ${OUT_DIR}"
    find "${OUT_DIR}" -type f -exec shred {} \;
  fi
  log::notice "Removing ${OUT_DIR}"
  rm -rf "${OUT_DIR}"
}

if [ "${ALL_NAMESPACES}" = "true" ]; then
  log::notice "Collecting information from all namespaces"
  for ns in $(k8s::get_ns); do
    log::notice "Begin collection for namespace $ns"
    topology "$ns"
    describe_pods "$ns"
    configmaps "$ns"
    logs "$ns"
    log::notice "End collection for namespace $ns"
  done
else
  topology "$NAMESPACE"
  describe_pods "$NAMESPACE"
  configmaps "$NAMESPACE"
  logs "$NAMESPACE"
fi
create_package
