#!/usr/bin/env bash
# Copyright 2021 Blockchain Technology Partners
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

# shellcheck source=includer.sh
source "$(dirname "${BASH_SOURCE[0]}")/includer.sh"

@include commands
@include exec
@include error
@include log
@include options

function _eksctl() {
  $(commands::use eksctl) "$@"
}

log::level 2
options::standard
options::description "Scan an AWS account for all EKS clusters and write\
 their configurations to the local users config."
options::add -o p -d "AWS Profile to use" -a -e AWS_PROFILE
options::parse_available "$@"

PROFILE_ARGS=()
if [ -n "${AWS_PROFILE}" ]; then
  log::info "Scanning ${AWS_PROFILE} for EKS clusters"
  PROFILE_ARGS+=(--profile "$AWS_PROFILE")
else
  log::info "Scanning default profile for EKS clusters"
fi

function get_clusters() {
  _eksctl get clusters "${PROFILE_ARGS[@]}" -A -o json -v 0
}

clusters="$(get_clusters)"
log::debug "Found clusters: $clusters"
for c in $(echo "$clusters" |
  $(commands::use jq) -r '.[].metadata |.name+"="+.region'); do
  cluster=$(echo "$c" | awk -F= '{print $1}')
  region=$(echo "$c" | awk -F= '{print $2}')
  log::info "Updating kubeconfig for $cluster in $region"
  exec::hide _eksctl utils write-kubeconfig "${PROFILE_ARGS[@]}" --cluster "$cluster" \
    --region "$region" || error::exit "Failed to update kubeconfig for $cluster"
done
