#!/usr/bin/env bash
# Copyright 2021 Blockchain Technology Partners
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

# shellcheck source=includer.sh
source "$(dirname "${BASH_SOURCE[0]}")/includer.sh"

@include git
@include options

options::standard
options::add -o l -d "add hyperlinks to commits" -x ADD_LINKS
options::add -o f -d "from date" -a -e FROM_DATE
options::add -o t -d "to date" -a -e TO_DATE
options::add -o d -d "show commit date" -x SHOW_DATE

options::parse_available "$@"

export GIT_PAGER=cat

function ::fromto() {
  local from to base_url
  from=${1:?}
  to=${2:?}
  base_url=${3}
  local c_count
  c_count=$(git::cmd log "$from"..."$to" --no-merges --pretty=format:"%s" |
    wc -c)
  if [ "$c_count" -eq 0 ]; then
    return
  fi
  if [ "$ADD_LINKS" = "true" ] && [ -n "$base_url" ]; then
    if [ "$SHOW_DATE" != "true" ]; then
      git::cmd log "$from"..."$to" --no-merges \
        --pretty=format:"* %s [view commit]($base_url/%H)"
    else
      git::cmd log "$from"..."$to" --no-merges \
        --pretty=format:"* %ci - %s [view commit]($base_url/%H)"
    fi
  else
    if [ "$SHOW_DATE" != "true" ]; then
      git::cmd log "$from"..."$to" --no-merges --pretty=format:"* %s"
    else
      git::cmd log "$from"..."$to" --no-merges --pretty=format:"* %ci - %s"
    fi

  fi
  echo
  echo
}

function ::current_branch() {
  git::cmd rev-parse --abbrev-ref HEAD
}

function ::date_to_commit_before() {
  local theDate=${1:?}
  git::cmd rev-list -n 1 --first-parent --before="$theDate" "$(::current_branch)"
}

function ::date_to_commit_after() {
  local theDate=${1:?}
  git::cmd rev-list -n 1 --first-parent --before="$theDate" "$(::current_branch)"
}

function ::full() {
  local later_tag=
  echo "# CHANGELOG"
  echo
  for tag in $(git::tagsinhistory); do
    if [ -z "$later_tag" ]; then
      later_tag="$tag"
      this_version=$(git describe --tags)
      long_version=$(git describe --tags --long)
      if [ "$this_version" = "$long_version" ]; then
        header_version="Unreleased"
      else
        header_version="$this_version"
      fi

      change_count=$(::fromto "$tag" "HEAD" "$(git::projecturl)" | grep . | grep -v '^* ci' | uniq | wc -l)
      if [ "$change_count" -gt 0 ]; then
        if [ "$this_version" != "$tag" ]; then
          echo "## $header_version"
          echo
          ::fromto "$tag" "HEAD" "$(git::projecturl)" | grep -v '^* ci' | uniq
        fi
      fi
    else
      change_count=$(::fromto "$tag" "HEAD" "$(git::projecturl)" | grep . | grep -v '^* ci' | uniq | wc -l)
      if [ "$change_count" -gt 0 ]; then
        echo "## $later_tag"
        echo
        ::fromto "$tag" "$later_tag" "$(git::projecturl)" | grep -v '^* ci' | uniq
      fi
      later_tag="$tag"
    fi
  done
}

if [ -n "$TO_DATE" ]; then
  to_commit=$(::date_to_commit_before "$TO_DATE")
fi

if [ -n "$FROM_DATE" ]; then
  from_commit=$(::date_to_commit_after "$FROM_DATE")
fi

if [ -n "$FROM_DATE" ] || [ -n "$TO_DATE" ]; then
  if [ -z "$to_commit" ]; then
    echo "No change history in the requested range"
    exit 0
  else
    ::fromto "$from_commit" "$to_commit"
  fi
else
  ::full
fi
