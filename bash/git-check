#!/usr/bin/env bash
# Copyright 2021 Blockchain Technology Partners
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

# shellcheck source=includer.sh
source "$(dirname "${BASH_SOURCE[0]}")/includer.sh"

@include exec
@include git
@include log
@include options

DEPTH=3
CLIENT=

function set_organization() {
  EXTRA="${1}"
  ((DEPTH -= 1))
}

function set_client() {
  BASE="clients/${1}"
  CLIENT="${1}"
}

options::standard
options::description "Check all the repositories according to the\
 parameters and update keep them in sync with the origin if possible"
options::add -o o -d "organization to scan" -a -f set_organization
options::add -o b -d "base directory to scan" -a -e BASE
options::add -o p -d "check for pull requests" -x GH_PR_CHECK
options::add -o c -d "check repositories for a particular client" \
  -a -f set_client
options::parse_available "$@"

BASE=${BASE:-""}
if [ -n "${BASE}" ]; then
  BASE="${BASE}/"
fi

function base_name_for_repo {
  local replace_path=${1:?}
  local repo_path=${2:?}
  echo "${repo_path//$replace_path/}"
}

function get_branch_name {
  local branch_name
  branch_name=$(git::cmd symbolic-ref -q HEAD)
  branch_name=${branch_name##refs/heads/}
  branch_name=${branch_name:-HEAD}
  echo "$branch_name"
}

function pull_if_different {
  local base_name
  base_name=${1:?}
  branch_name=${2:?}
  git::cmd fetch origin
  if git::cmd diff "remotes/origin/$branch_name" --quiet >/dev/null 2>&1; then
    log::info "Examining $base_name: up to date"
  else
    log::notice "Examining $base_name: pulling"
    exec::hide git::cmd pull
  fi
}

function get_gh_pr_count {
  local orgname
  local base_name
  orgname=${1:?}
  base_name=${2:?}
  if [ "$GH_PR_CHECK" != "true" ]; then
    echo -
    return
  fi
  if command -v gh >/dev/null; then
    if [ "$orgname" = "blockchaintp" ] ||
      [ "$orgname" = "catenasys" ] || [ "$orgname" = "scealiontach" ]; then
      log::debug "Checking pull requests for $base_name"
      gh pr list -R "$base_name" | grep -cv "no open"
    else
      echo -
    fi
  else
    echo .
  fi
}

function get_bb_pr_count {
  local orgname
  local base_name
  orgname=${1:?}
  base_name=${2:?}
  if [ "$GH_PR_CHECK" != "true" ]; then
    echo -
    return
  fi
  if command -v bb >/dev/null; then
    if [ "$orgname" = "TASE" ]; then
      log::debug "Checking pull requests for $base_name"
      bb -c "$orgname" pr-count "$base_name"
    else
      echo -
    fi
  else
    echo .
  fi
}

base_path="$HOME/git/${BASE}"
log::info "Scanning ${base_path}${EXTRA} for repositories"

max_repo_len=0
max_branch_len=0
for repo in $(find "${base_path}${EXTRA}" -mindepth "${DEPTH}" -maxdepth "${DEPTH}" -name .git -exec dirname {} \; | sort); do
  cd "$repo" || exit 1
  base_name=$(base_name_for_repo "$base_path" "$repo")
  orgname=$(dirname "$base_name")
  branch_name=$(get_branch_name)
  dirty_version=$(git::describe --tags 2>/dev/null)-dirty
  version=$(git::describe --dirty --tags 2>/dev/null)
  long_version=$(git::describe --long --tags 2>/dev/null)

  len=${#base_name}
  branch_len=${#branch_name}

  max_repo_len=$((len > max_repo_len ? len : max_repo_len))
  max_branch_len=$((branch_len > max_branch_len ? branch_len : max_branch_len))
  status=$(git::cmd status --short | wc -l)
  if [ "$status" = "0" ]; then
    pull_if_different "$base_name" "$branch_name"
  else
    log::notice "Examining $base_name: dirty"
  fi

  if [ -z "$CLIENT" ]; then
    pr_count=$(get_gh_pr_count "$orgname" "$base_name")
  elif [ "$CLIENT" = "TASE" ]; then
    pr_count=$(get_bb_pr_count "$CLIENT" "$base_name")
  else
    pr_count='.'
  fi

  if [ -z "$version" ]; then
    version=$(git::cmd rev-parse --short HEAD)
    UNCOMMITTED="${UNCOMMITTED}$base_name:$pr_count:$branch_name:$version,"
  elif [ "$version" = "$dirty_version" ]; then
    UNCOMMITTED="${UNCOMMITTED}$base_name:$pr_count:$branch_name:$version,"
  elif [ "$version" != "$long_version" ]; then
    RELEASABLE="${RELEASABLE}$base_name:$pr_count:$branch_name:$version,"
  else
    DEVELOPMENT="${DEVELOPMENT}$base_name:$pr_count:$branch_name:$version,"
  fi
done

function output() {
  local color=$1
  local item=$2
  for token in ${item//,/ }; do
    count=0
    for part in ${token//:/ }; do
      ((count += 1))
      if [ "$count" -gt 2 ]; then
        tput setaf "$color"
      fi
      if [ "$count" -eq 1 ]; then
        printf "%-${max_repo_len}s " "$part"
      elif [ "$count" -eq 3 ]; then
        if [ "$part" != "master" ] && [ "$part" != "main" ]; then
          tput setaf 6
        else
          tput setaf 2
        fi
        printf "%-${max_branch_len}s " "$part"
        tput sgr0
      elif [ "$count" -eq 4 ]; then
        printf "%-10s " "$part"
      else
        printf "%-5s " "$part"
      fi
      if [ "$count" -gt 2 ]; then
        tput sgr0
      fi
    done
    printf "\n"
  done
}

output 2 "$RELEASABLE"
output 6 "$DEVELOPMENT"
output 3 "$UNCOMMITTED"

echo "${PULLS}"
