#!/usr/bin/env bash
# Copyright Â© 2023 Kevin T. O'Donnell
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

# shellcheck source=includer.sh
source "$(dirname "${BASH_SOURCE[0]}")/includer.sh"

@include k8s
@include log
@include options

options::standard
options::description "Migrate the keys from one validator to another."
options::add -o f -d "node to migrate from" -a -m -e FROM_NODE
options::add -o t -d "node to migrate to" -a -m -e TRGT_NODE
options::add -o l -d "label of the sawtooth" -a -m -e LABEL
options::parse "$@"

declare -A node2pod
declare -A pod2node

function getPodsForLabel() {
  local label=${1:?}
  k8s::ctl get pods -l "$label" -o name | awk -F/ '{print $2}'
}

function getNodeForPod() {
  local pod=${1:?}
  k8s::ctl get "pod/${pod}" -o json | jq -r '.spec.nodeName'
}

function mapPods() {
  local _label=${1:?}
  log::info "mapping pods to nodes for label $_label"
  for p in $(getPodsForLabel "${_label:?}"); do
    node=$(getNodeForPod "${p}")
    node2pod[$node]=$p
    # shellcheck disable=SC2034
    pod2node[$p]=$node
  done
}

TEMP_DIR=$(mktemp -d)
log::info "using temporary directory $TEMP_DIR"
function getKeys() {
  local pod=${1:?}
  log::info "fetching keys from $pod"
  mkdir -p "$TEMP_DIR/$pod"
  k8s::ctl cp "$pod:etc/sawtooth/keys" "$TEMP_DIR/$pod" -c validator
}

function pushKeys() {
  local from_pod=${1:?}
  local to_pod=${2:?}
  log::info "push keys to $to_pod"
  if [ -d "$TEMP_DIR/$from_pod" ]; then
    k8s::ctl cp "$TEMP_DIR/$from_pod/validator.priv" "$to_pod:etc/sawtooth/keys/" \
      -c validator &&
      k8s::ctl cp "$TEMP_DIR/$from_pod/validator.pub" "$to_pod:etc/sawtooth/keys/" \
        -c validator
    return $?
  else
    log::error "Source keys don't exist at dir $TEMP_DIR/$from_pod"
    return 1
  fi
}

function unlabelNode() {
  local node=${1:?}
  local label=${2:?}
  log::info "Removing label $label from node $node"
  local neg_label
  neg_label="${label//=*/}-"
  k8s::ctl label node "$node" "$neg_label"
}

function labelNode() {
  node=${1:?}
  label=${2:?}
  log::info "Removing label $label from node $node"
  k8s::ctl label node "$node" "$label"
}

function waitForPodTermination() {
  local pod=${1:?}
  log::info "Waiting for pod $pod to terminate"
  while k8s::ctl get pod "$pod" -o name >/dev/null 2>&1; do
    sleep 5
    log::info "Waiting for pod $pod to terminate"
  done
}

function main() {
  # shellcheck disable=SC2153
  mapPods "$LABEL"
  from_pod=${node2pod[$FROM_NODE]}
  to_pod=${node2pod[$TRGT_NODE]}

  getKeys "$from_pod"
  getKeys "$to_pod"
  pushKeys "$from_pod" "$to_pod"
  unlabelNode "$FROM_NODE" "$LABEL"
  waitForPodTermination "$from_pod"
  unlabelNode "$TRGT_NODE" "$LABEL"
  waitForPodTermination "$to_pod"
  labelNode "$TRGT_NODE" "$LABEL"

}

main
