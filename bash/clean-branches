#!/usr/bin/env bash
# Copyright Â© 2023 Paravela Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http:#www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

# shellcheck source=includer.sh
source "$(dirname "${BASH_SOURCE[0]}")/includer.sh"

@include error
@include exec
@include git
@include log
@include options

options::standard
options::set_description "Cleans the target directory of branches which have \
  lost their remote counterparts."
options::add -o d -d "target directory" -a -e TARGET_DIR
options::parse_available "$@"

# globals
TARGET_DIR="${TARGET_DIR:-$(pwd)}"

if [ ! -d "$TARGET_DIR/.git" ]; then
  error::exit "$TARGET_DIR is not the root of a git repository"
fi

cd "$TARGET_DIR" || error::exit "Failed to cd to $TARGET_DIR, check permissions"

log::info "Fetching for repository $TARGET_DIR"
exec::capture git::cmd fetch -p
log::info "Checking for branches without remotes"
for name in $(git::cmd branch -vv | grep -v '^\*' | grep -v "\[.*]" | awk '{print $1}'); do
  log::info "Branch $name has no remote, deleting"
  exec::capture git::cmd branch -D "$name"
done

log::info "Checking for branches where the remote has been deleted"
for branch in $(git::cmd branch -vv | grep ': gone]' | grep -v "\*" | awk '{ print $1; }'); do
  log::info "Deleting $branch"
  exec::capture git::cmd branch -D "$branch"
done

log::info "Checking for old build tags"
for tag in $(git::cmd tag -l | grep build/); do
  log::info "Deleting tag $tag"
  exec::capture git::cmd push --delete origin "$tag"
  exec::capture git::cmd tag -d "$tag"
done
